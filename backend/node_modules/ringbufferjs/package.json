{
  "_args": [
    [
      {
        "raw": "ringbufferjs",
        "scope": null,
        "escapedName": "ringbufferjs",
        "name": "ringbufferjs",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "C:\\Users\\nael\\p\\streamer\\backend"
    ]
  ],
  "_from": "ringbufferjs@latest",
  "_id": "ringbufferjs@0.0.1",
  "_inCache": true,
  "_location": "/ringbufferjs",
  "_npmUser": {
    "name": "janogonzalez",
    "email": "info@janogonzalez.com"
  },
  "_npmVersion": "1.2.11",
  "_phantomChildren": {},
  "_requested": {
    "raw": "ringbufferjs",
    "scope": null,
    "escapedName": "ringbufferjs",
    "name": "ringbufferjs",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/ringbufferjs/-/ringbufferjs-0.0.1.tgz",
  "_shasum": "e9a6ad5323fcd8607f8aaba8c1c469916b9bcd55",
  "_shrinkwrap": null,
  "_spec": "ringbufferjs",
  "_where": "C:\\Users\\nael\\p\\streamer\\backend",
  "author": {
    "name": "Jano Gonz√°lez",
    "email": "info@janogonzalez.com"
  },
  "bugs": {
    "url": "https://github.com/janogonzalez/ringbufferjs/issues"
  },
  "dependencies": {},
  "description": "a simple ring buffer data structure",
  "devDependencies": {
    "expect.js": "*",
    "mocha": "*"
  },
  "directories": {},
  "dist": {
    "shasum": "e9a6ad5323fcd8607f8aaba8c1c469916b9bcd55",
    "tarball": "https://registry.npmjs.org/ringbufferjs/-/ringbufferjs-0.0.1.tgz"
  },
  "homepage": "https://github.com/janogonzalez/ringbufferjs#readme",
  "keywords": [
    "ring",
    "buffer",
    "circular",
    "queue",
    "ring buffer",
    "circular buffer",
    "data structure"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "janogonzalez",
      "email": "info@janogonzalez.com"
    }
  ],
  "name": "ringbufferjs",
  "optionalDependencies": {},
  "readme": "# ringbuffer.js\n\nA simple ring buffer data structure for Node.js and the browser.\n\n## Installation\n\nAs component for the browser:\n\n```\n$ component install janogonzalez/ringbufferjs\n```\n\nAs npm for Node.js:\n\n```\n$ npm install ringbufferjs\n```\n\n## Example\n\n```js\nvar RingBuffer = require('ringbufferjs');\n\nvar ring = new RingBuffer(2);\n\nring.enq(10);\nring.enq(5);\nring.enq(1); // 10 will be discarded\nring.size(); // 2\nring.peek(); // 10\nring.deq(); // 10\nring.size(); // 1\n```\n\n## API\n\n### RingBuffer()\n\nInitializes a new empty `RingBuffer` with the default capacity (50).\n\n### RingBuffer(capacity)\n\nInitializes a new empty `RingBuffer` with the given `capacity`.\n\n### RingBuffer#capacity()\n\nReturns the capacity of the ring buffer.\n\n### RingBuffer#deq()\n\nDequeues the top element of the ring buffer.\nThrows an `Error` when the buffer is empty.\n\n### RingBuffer#enq(element)\n\nEnqueues the `element` at the end of the ring buffer and returns its new size.\nWhen the buffer is full the oldest element is discarded.\n\n### RingBuffer#isEmpty()\n\nReturns whether the ring buffer is empty or not.\n\n### RingBuffer#isFull()\n\nReturns whether the ring buffer is full or not.\n\n### RingBuffer#peek()\n\nPeeks at the top element of the ring buffer.\nThrows an `Error` when the buffer is empty.\n\n### RingBuffer#size()\n\nReturns the size of the ring buffer.\n\n## Testing\n\nAs component in the browser, open test/test.html in your browser:\n\n```\n$ make\n$ open test/test.html\n```\n\nAs npm package:\n\n```\n$ npm test\n```\n\n## Licence\n\nMIT\n",
  "readmeFilename": "Readme.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/janogonzalez/ringbufferjs.git"
  },
  "scripts": {
    "test": "mocha"
  },
  "version": "0.0.1"
}
